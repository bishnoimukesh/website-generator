"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import Image from "next/image";
import {
  ArrowLeft,
  Check,
  ChevronRight,
  ExternalLink,
  Copy,
  Code2,
  Download,
  Share2,
  Sparkles,
  PencilRuler,
  Globe,
  Laptop,
  LayoutGrid,
} from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { createClient } from "@/utils/supabase/client";

import {
  FeatureItem,
  TestimonialItem,
  PricingPlan,
  GalleryItem,
  WebsiteContent,
} from "@/lib/types";

// Helper function to generate a placeholder image URL based on a description
function getImageUrl(
  description: string,
  width: number = 800,
  height: number = 600
): string {
  // Create a hash from the description to get a consistent image for the same description
  let hash = 0;
  for (let i = 0; i < description.length; i++) {
    hash = (hash << 5) - hash + description.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }
  hash = Math.abs(hash);

  // Use different categories based on aspect ratio of requested image
  const aspectRatio = width / height;

  // Set of reliable image IDs for each category
  const reliableImageIds = {
    landscape: [1, 2, 3, 5, 8, 13, 21, 34, 55, 89],
    nature: [144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946],
    people: [1123, 2584, 4321, 7752, 8431, 9753, 12345, 23456, 34567, 45678],
    buildings: [1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999, 11111],
    technology: [1010, 2020, 3030, 4040, 5050, 6060, 7070, 8080, 9090, 10100],
    abstract: [1212, 2323, 3434, 4545, 5656, 6767, 7878, 8989, 9090, 12121],
  };

  // Select category based on aspect ratio and hash
  let category;
  if (aspectRatio > 1.5) {
    // For wider images, use landscape or nature
    category = hash % 2 === 0 ? "landscape" : "nature";
  } else if (aspectRatio <= 1) {
    // For square or portrait images, use people or abstract
    category = hash % 2 === 0 ? "people" : "abstract";
  } else {
    // For standard aspect ratio, use any category
    const categories = Object.keys(reliableImageIds);
    category = categories[hash % categories.length];
  }

  // Select a reliable image ID from the chosen category
  const imageIds = reliableImageIds[category as keyof typeof reliableImageIds];
  const imageId = imageIds[hash % imageIds.length];

  // Fallback to a reliable placeholder service if needed
  return `https://picsum.photos/id/${imageId}/${width}/${height}`;
}

// Helper function to generate a background style for a section based on an image description
function getSectionBackgroundStyle(imageDescription?: string) {
  if (!imageDescription) return {};

  return {
    backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.7)), url(${getImageUrl(
      imageDescription,
      1200,
      800
    )})`,
    backgroundSize: "cover",
    backgroundPosition: "center",
    color: "white",
  };
}

export default function WebsitePreview() {
  const params = useParams();
  const router = useRouter();
  const [content, setContent] = useState<WebsiteContent | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeView, setActiveView] = useState<"preview" | "code">("preview");
  const [authChecked, setAuthChecked] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const supabase = createClient();

  useEffect(() => {
    // Check authentication first
    const checkAuth = async () => {
      const { data } = await supabase.auth.getUser();
      if (data?.user) {
        setIsAuthenticated(true);
      } else {
        setIsAuthenticated(false);
        router.push("/login");
      }
      setAuthChecked(true);
    };
    checkAuth();
  }, [router, supabase]);

  useEffect(() => {
    if (!authChecked || !isAuthenticated) return;
    // We use localStorage to get the content generated by OpenAI through the API
    try {
      const savedContent = localStorage.getItem("generatedWebsiteContent");
      if (savedContent) {
        const parsedContent = JSON.parse(savedContent);

        // Check if this is actually OpenAI generated content by looking for expected structure
        if (
          !parsedContent ||
          !parsedContent.title ||
          !Array.isArray(parsedContent.sections)
        ) {
          throw new Error("Invalid content structure");
        }

        setContent(parsedContent);
      } else {
        setError(
          "No content found. Please generate a website first with the OpenAI API."
        );
      }
    } catch (err) {
      if (err instanceof Error) {
        if (err.message === "Invalid content structure") {
          setError(
            "The content format is invalid. Please regenerate the website."
          );
        } else if (
          err.message.includes("network") ||
          err.message.includes("connection") ||
          err.message.includes("Connection error")
        ) {
          setError(
            "Connection error: Unable to load website content. This may be due to network issues or the OpenAI API being temporarily unavailable."
          );
        } else {
          setError(
            "Failed to load website content. Make sure OpenAI API is properly configured."
          );
        }
      } else {
        setError("Unknown error occurred while loading website content.");
      }
      console.error(err);
    } finally {
      setLoading(false);
    }
  }, [params.id, authChecked, isAuthenticated]);

  if (!authChecked) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <Card className="w-full max-w-md p-8">
          <CardHeader>
            <CardTitle className="text-2xl text-center">
              Checking authentication...
            </CardTitle>
          </CardHeader>
          <CardContent className="flex justify-center py-6">
            <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary"></div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null; // Redirect handled by router
  }

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <Card className="w-full max-w-md p-8">
          <CardHeader>
            <CardTitle className="text-2xl text-center">
              Preparing Your Website
            </CardTitle>
            <CardDescription className="text-center mt-2">
              Loading your beautiful new website...
            </CardDescription>
          </CardHeader>
          <CardContent className="flex justify-center py-6">
            <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary"></div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error || !content) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-2xl text-red-500">
              Oops! Something went wrong
            </CardTitle>
            <CardDescription className="mt-2">
              We couldn&apos;t load your website preview.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <p className="text-md mb-4 p-4 bg-muted rounded-md">
              {error ||
                "No content available. Please generate a website first."}
            </p>
            {error &&
              (error.includes("OpenAI API key") ||
                error.includes("API key") ||
                error.includes("OpenAI")) && (
                <div className="mt-4 p-4 bg-amber-50 border border-amber-200 rounded-md text-amber-800">
                  <p className="font-semibold mb-2">
                    Missing or Invalid OpenAI API Key
                  </p>
                  <p className="text-sm mb-2">
                    This application requires a valid OpenAI API key to generate
                    website content.
                  </p>
                  <ol className="list-decimal text-sm ml-5 space-y-1">
                    <li>
                      Create a file named{" "}
                      <code className="bg-amber-100 px-1 rounded">
                        .env.local
                      </code>{" "}
                      in the root directory
                    </li>
                    <li>
                      Add{" "}
                      <code className="bg-amber-100 px-1 rounded">
                        OPENAI_API_KEY=your_actual_api_key
                      </code>{" "}
                      to the file
                    </li>
                    <li>Restart the development server</li>
                    <li>Try generating a website again</li>
                  </ol>
                </div>
              )}

            {/* Additional guidance for connection errors */}
            {error &&
              (error.includes("Connection error") ||
                error.includes("network") ||
                error.includes("connection")) && (
                <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md text-blue-800">
                  <p className="font-semibold mb-2">Connection Issues</p>
                  <p className="text-sm mb-2">
                    There was a problem connecting to the OpenAI API:
                  </p>
                  <ul className="list-disc text-sm ml-5 space-y-1">
                    <li>Check your internet connection</li>
                    <li>Verify that OpenAI services are operational</li>
                    <li>
                      Ensure your firewall or network isn&apos;t blocking API
                      requests
                    </li>
                    <li>
                      The API might be experiencing temporary issues - try again
                      later
                    </li>
                  </ul>
                </div>
              )}
          </CardContent>
          <CardFooter className="flex flex-col sm:flex-row gap-2">
            <Link href="/" className="w-full">
              <Button className="w-full" variant="default">
                <ArrowLeft className="mr-2 h-4 w-4" />
                Back to Home
              </Button>
            </Link>
            {error &&
              (error.includes("Connection error") ||
                error.includes("network") ||
                error.includes("connection")) && (
                <Link href="/" className="w-full">
                  <Button className="w-full" variant="outline">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className="rotate-90 mr-2"
                    >
                      <path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
                      <path d="M3 3v5h5" />
                      <path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16" />
                      <path d="M16 21h5v-5" />
                    </svg>
                    Try Again
                  </Button>
                </Link>
              )}
          </CardFooter>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background flex flex-col">
      {/* Header with controls */}
      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-14 max-w-screen-2xl items-center">
          <Link href="/" className="mr-4 flex items-center">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              <span>Back</span>
            </Button>
          </Link>
          <div className="flex-1 flex items-center justify-center">
            <h1 className="text-xl font-semibold text-center">
              {content.title || "Website Preview"}
            </h1>
          </div>
          <div className="flex items-center justify-end space-x-2">
            <div className="hidden md:flex">
              <div className="border rounded-md overflow-hidden flex">
                <Button
                  variant={activeView === "preview" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setActiveView("preview")}
                  className="rounded-none px-3 flex gap-1"
                >
                  <Globe className="h-4 w-4" />
                  <span>Preview</span>
                </Button>
                <Button
                  variant={activeView === "code" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setActiveView("code")}
                  className="rounded-none px-3 flex gap-1"
                >
                  <Code2 className="h-4 w-4" />
                  <span>Code</span>
                </Button>
              </div>
            </div>
            <Button size="sm" variant="outline">
              <Share2 className="h-4 w-4 mr-1" />
              Share
            </Button>
            <Button size="sm">
              <Download className="h-4 w-4 mr-1" />
              Export
            </Button>
          </div>
        </div>
      </header>

      {/* Main content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar */}
        <div className="hidden md:block w-64 border-r bg-muted/30 p-4 overflow-y-auto">
          <div className="mb-6">
            <h3 className="text-sm font-semibold mb-2">Website Details</h3>
            <Card className="mb-3">
              <CardContent className="p-3 space-y-2">
                <div>
                  <span className="text-xs text-muted-foreground">Title</span>
                  <p className="text-sm font-medium">{content.title}</p>
                </div>
                <div>
                  <span className="text-xs text-muted-foreground">
                    Description
                  </span>
                  <p className="text-sm">{content.description}</p>
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="mb-6">
            <h3 className="text-sm font-semibold mb-2">Sections</h3>
            <div className="space-y-2">
              {content.sections.map((section, idx) => (
                <Button
                  key={idx}
                  variant="ghost"
                  size="sm"
                  className="w-full justify-start text-left px-2 h-auto py-2"
                >
                  <div className="flex items-center justify-between w-full">
                    <div className="flex items-center gap-2">
                      {section.type === "hero" && (
                        <Sparkles className="h-4 w-4" />
                      )}
                      {section.type === "features" && (
                        <LayoutGrid className="h-4 w-4" />
                      )}
                      {section.type === "about" && (
                        <PencilRuler className="h-4 w-4" />
                      )}
                      <span className="capitalize">{section.type}</span>
                    </div>
                    <ChevronRight className="h-4 w-4 opacity-50" />
                  </div>
                </Button>
              ))}
            </div>
          </div>

          <div>
            <h3 className="text-sm font-semibold mb-2">Actions</h3>
            <div className="space-y-2">
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start"
              >
                <PencilRuler className="h-4 w-4 mr-2" /> Edit Design
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start"
              >
                <Laptop className="h-4 w-4 mr-2" /> View Responsive
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start"
              >
                <ExternalLink className="h-4 w-4 mr-2" /> Open in New Tab
              </Button>
            </div>
          </div>
        </div>

        {/* Preview content */}
        <div className="flex-1 overflow-y-auto">
          {activeView === "preview" ? (
            <div className="preview-website">
              {/* Render sections based on their type */}
              {content.sections.map((section, idx) => {
                switch (section.type) {
                  case "hero":
                    return (
                      <section
                        key={idx}
                        className={`bg-primary/5 ${
                          section.layout === "fullscreen"
                            ? "min-h-screen"
                            : "py-20"
                        } px-4 flex items-center`}
                        style={
                          content.theme?.primaryColor
                            ? {
                                backgroundColor: `${content.theme.primaryColor}10`,
                              }
                            : {}
                        }
                      >
                        {section.layout === "split" ? (
                          <div className="max-w-6xl mx-auto grid md:grid-cols-2 gap-8 items-center">
                            <div className="text-left">
                              <h1 className="text-4xl md:text-6xl font-bold mb-6">
                                {section.heading}
                              </h1>
                              {section.subheading && (
                                <p className="text-lg md:text-xl text-muted-foreground mb-8">
                                  {section.subheading}
                                </p>
                              )}
                              {section.cta && (
                                <Button
                                  size="lg"
                                  className="rounded-full px-8"
                                  style={
                                    content.theme?.primaryColor
                                      ? {
                                          backgroundColor:
                                            content.theme.primaryColor,
                                          borderColor:
                                            content.theme.primaryColor,
                                        }
                                      : {}
                                  }
                                >
                                  {section.cta}
                                </Button>
                              )}
                            </div>
                            <div className="order-first md:order-last">
                              <div className="aspect-video bg-muted/50 rounded-md flex items-center justify-center overflow-hidden">
                                {section.image ? (
                                  <Image
                                    src={getImageUrl(section.image, 800, 450)}
                                    alt={section.heading}
                                    width={800}
                                    height={450}
                                    className="w-full h-full object-cover"
                                  />
                                ) : (
                                  <p className="text-center p-4 text-muted-foreground">
                                    No image description provided
                                  </p>
                                )}
                              </div>
                            </div>
                          </div>
                        ) : (
                          <div className="max-w-6xl mx-auto text-center">
                            <h1
                              className="text-4xl md:text-6xl font-bold mb-6"
                              style={
                                content.theme?.fontFamily
                                  ? {
                                      fontFamily: content.theme.fontFamily,
                                    }
                                  : {}
                              }
                            >
                              {section.heading}
                            </h1>
                            {section.subheading && (
                              <p className="text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto">
                                {section.subheading}
                              </p>
                            )}
                            {section.image && section.layout !== "centered" && (
                              <div className="max-w-2xl mx-auto mb-8">
                                <div className="aspect-video bg-muted/50 rounded-md flex items-center justify-center overflow-hidden">
                                  <Image
                                    src={getImageUrl(section.image, 1000, 600)}
                                    alt={section.heading}
                                    width={1000}
                                    height={600}
                                    className="w-full h-full object-cover"
                                  />
                                </div>
                              </div>
                            )}
                            {section.cta && (
                              <Button
                                size="lg"
                                className="rounded-full px-8"
                                style={
                                  content.theme?.primaryColor
                                    ? {
                                        backgroundColor:
                                          content.theme.primaryColor,
                                        borderColor: content.theme.primaryColor,
                                      }
                                    : {}
                                }
                              >
                                {section.cta}
                              </Button>
                            )}
                          </div>
                        )}
                      </section>
                    );

                  case "features":
                    return (
                      <section key={idx} className="py-16 px-4 bg-background">
                        <div className="max-w-6xl mx-auto">
                          <h2 className="text-3xl font-bold text-center mb-12">
                            {section.heading}
                          </h2>
                          {section.subheading && (
                            <p className="text-xl text-muted-foreground text-center mb-12 max-w-3xl mx-auto">
                              {section.subheading}
                            </p>
                          )}
                          <div
                            className={`grid grid-cols-1 ${
                              section.layout === "alternating"
                                ? "md:grid-cols-2"
                                : "md:grid-cols-3"
                            } gap-8`}
                          >
                            {section.items?.map((item, itemIdx) => {
                              // Type guard to check if the item is a feature
                              const feature = item as FeatureItem;
                              if (!feature.icon) return null;

                              return (
                                <Card
                                  key={itemIdx}
                                  className={`overflow-hidden border-none shadow-md ${
                                    section.layout === "alternating" &&
                                    itemIdx % 2 === 1
                                      ? "md:translate-y-12"
                                      : ""
                                  }`}
                                >
                                  <CardHeader className="pb-2">
                                    <div className="w-12 h-12 flex items-center justify-center rounded-full bg-primary/10 text-primary mb-2">
                                      {/* Simple icon representation */}
                                      <div className="font-bold">
                                        {feature.icon.charAt(0)}
                                      </div>
                                    </div>
                                    <CardTitle className="text-xl">
                                      {feature.title}
                                    </CardTitle>
                                  </CardHeader>
                                  <CardContent>
                                    <p className="text-muted-foreground">
                                      {feature.description}
                                    </p>
                                  </CardContent>
                                  {feature.image && (
                                    <div className="mt-4 px-6 pb-6">
                                      <div className="aspect-video bg-muted/50 rounded-md flex items-center justify-center overflow-hidden">
                                        <Image
                                          src={getImageUrl(
                                            feature.image,
                                            400,
                                            225
                                          )}
                                          alt={feature.title}
                                          width={400}
                                          height={225}
                                          className="w-full h-full object-cover"
                                        />
                                      </div>
                                    </div>
                                  )}
                                </Card>
                              );
                            })}
                          </div>
                        </div>
                      </section>
                    );

                  case "about":
                    return (
                      <section
                        key={idx}
                        className="py-16 px-4"
                        style={
                          content.theme?.secondaryColor
                            ? {
                                backgroundColor: `${content.theme.secondaryColor}10`,
                              }
                            : { backgroundColor: "var(--muted)" }
                        }
                      >
                        <div className="max-w-6xl mx-auto">
                          <h2 className="text-3xl font-bold text-center mb-8">
                            {section.heading}
                          </h2>

                          {section.layout === "image-left" ||
                          section.layout === "image-right" ? (
                            <div
                              className={`grid md:grid-cols-2 gap-8 items-center ${
                                section.layout === "image-right"
                                  ? "md:flex-row-reverse"
                                  : ""
                              }`}
                            >
                              <div
                                className={
                                  section.layout === "image-right"
                                    ? "order-first md:order-last"
                                    : ""
                                }
                              >
                                <div className="aspect-video bg-muted/50 rounded-md flex items-center justify-center overflow-hidden">
                                  {section.image ? (
                                    <Image
                                      src={getImageUrl(section.image, 800, 450)}
                                      alt={section.heading}
                                      width={800}
                                      height={450}
                                      className="w-full h-full object-cover"
                                    />
                                  ) : (
                                    <p className="text-center p-4 text-muted-foreground">
                                      No image provided
                                    </p>
                                  )}
                                </div>
                              </div>
                              <div>
                                <Card className="border-none bg-card/50 shadow-sm">
                                  <CardContent className="prose max-w-none p-6">
                                    <p>{section.content}</p>
                                  </CardContent>
                                </Card>
                              </div>
                            </div>
                          ) : (
                            <Card className="border-none bg-card/50 shadow-sm">
                              <CardContent className="prose max-w-none p-6">
                                <p>{section.content}</p>
                              </CardContent>
                              {section.image &&
                                section.layout !== "text-only" && (
                                  <div className="px-6 pb-6">
                                    <div className="aspect-video bg-muted/50 rounded-md flex items-center justify-center overflow-hidden">
                                      <Image
                                        src={getImageUrl(
                                          section.image,
                                          800,
                                          450
                                        )}
                                        alt={section.heading}
                                        width={800}
                                        height={450}
                                        className="w-full h-full object-cover"
                                      />
                                    </div>
                                  </div>
                                )}
                            </Card>
                          )}
                        </div>
                      </section>
                    );

                  case "testimonials":
                    return (
                      <section
                        key={idx}
                        className="py-16 px-4 bg-gradient-to-b from-muted/30 to-background"
                      >
                        <div className="max-w-6xl mx-auto">
                          <h2 className="text-3xl font-bold text-center mb-12">
                            {section.heading}
                          </h2>
                          {section.subheading && (
                            <p className="text-xl text-muted-foreground text-center mb-12 max-w-3xl mx-auto">
                              {section.subheading}
                            </p>
                          )}
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                            {section.testimonials?.map(
                              (testimonial: TestimonialItem, i: number) => (
                                <Card
                                  key={i}
                                  className="bg-card/50 border-none shadow-md"
                                >
                                  <CardContent className="pt-6 relative">
                                    <div className="mb-4 text-3xl text-primary">
                                      &ldquo;
                                    </div>
                                    <p className="text-lg mb-4 italic">
                                      {testimonial.quote}
                                    </p>
                                    <div className="flex items-center mt-6">
                                      <div className="w-10 h-10 rounded-full bg-muted flex items-center justify-center mr-3">
                                        {testimonial.author.charAt(0)}
                                      </div>
                                      <div>
                                        <p className="font-semibold">
                                          {testimonial.author}
                                        </p>
                                        <p className="text-sm text-muted-foreground">
                                          {testimonial.role}
                                        </p>
                                      </div>
                                    </div>
                                  </CardContent>
                                </Card>
                              )
                            )}
                          </div>
                        </div>
                      </section>
                    );

                  case "pricing":
                    return (
                      <section key={idx} className="py-16 px-4">
                        <div className="max-w-6xl mx-auto">
                          <h2 className="text-3xl font-bold text-center mb-6">
                            {section.heading}
                          </h2>
                          {section.subheading && (
                            <p className="text-xl text-muted-foreground text-center mb-12 max-w-3xl mx-auto">
                              {section.subheading}
                            </p>
                          )}
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                            {section.plans?.map(
                              (plan: PricingPlan, i: number) => (
                                <Card
                                  key={i}
                                  className={`shadow-md ${
                                    plan.highlighted
                                      ? "border-primary border-2"
                                      : "border"
                                  }`}
                                >
                                  <CardHeader>
                                    <CardTitle className="text-2xl">
                                      {plan.name}
                                    </CardTitle>
                                    <div className="mt-2">
                                      <span className="text-3xl font-bold">
                                        {plan.price}
                                      </span>
                                      {plan.period && (
                                        <span className="text-muted-foreground ml-2">
                                          /{plan.period}
                                        </span>
                                      )}
                                    </div>
                                  </CardHeader>
                                  <CardContent>
                                    <ul className="space-y-2">
                                      {plan.features.map((feature, fi) => (
                                        <li
                                          key={fi}
                                          className="flex items-center"
                                        >
                                          <Check className="h-5 w-5 mr-2 text-primary" />
                                          <span>{feature}</span>
                                        </li>
                                      ))}
                                    </ul>
                                  </CardContent>
                                  <CardFooter>
                                    <Button
                                      className={`w-full ${
                                        plan.highlighted ? "bg-primary" : ""
                                      }`}
                                      variant={
                                        plan.highlighted ? "default" : "outline"
                                      }
                                      style={
                                        plan.highlighted &&
                                        content.theme?.primaryColor
                                          ? {
                                              backgroundColor:
                                                content.theme.primaryColor,
                                              borderColor:
                                                content.theme.primaryColor,
                                            }
                                          : {}
                                      }
                                    >
                                      {plan.cta}
                                    </Button>
                                  </CardFooter>
                                </Card>
                              )
                            )}
                          </div>
                        </div>
                      </section>
                    );

                  case "gallery":
                    return (
                      <section key={idx} className="py-16 px-4">
                        <div className="max-w-6xl mx-auto">
                          <h2 className="text-3xl font-bold text-center mb-6">
                            {section.heading}
                          </h2>
                          {section.subheading && (
                            <p className="text-xl text-muted-foreground text-center mb-12 max-w-3xl mx-auto">
                              {section.subheading}
                            </p>
                          )}
                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                            {section.items?.map((item, itemIdx) => {
                              const galleryItem = item as GalleryItem;
                              return (
                                <div
                                  key={itemIdx}
                                  className="group relative overflow-hidden rounded-lg"
                                >
                                  <div className="aspect-square bg-muted/50 flex items-center justify-center overflow-hidden">
                                    <Image
                                      src={getImageUrl(
                                        galleryItem.image,
                                        400,
                                        400
                                      )}
                                      alt={galleryItem.title}
                                      width={400}
                                      height={400}
                                      className="w-full h-full object-cover"
                                    />
                                  </div>
                                  <div className="absolute inset-0 bg-black/70 opacity-0 group-hover:opacity-100 flex flex-col justify-end p-4 transition-opacity">
                                    <h3 className="text-white font-semibold">
                                      {galleryItem.title}
                                    </h3>
                                    <p className="text-white/80 text-sm">
                                      {galleryItem.description}
                                    </p>
                                  </div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      </section>
                    );

                  case "contact":
                    return (
                      <section key={idx} className="py-16 px-4">
                        <div className="max-w-6xl mx-auto">
                          <h2 className="text-3xl font-bold text-center mb-6">
                            {section.heading}
                          </h2>
                          {section.subheading && (
                            <p className="text-xl text-muted-foreground text-center mb-12 max-w-3xl mx-auto">
                              {section.subheading}
                            </p>
                          )}
                          <div className="grid md:grid-cols-2 gap-8">
                            <Card className="shadow-md">
                              <CardHeader>
                                <CardTitle>Contact Information</CardTitle>
                              </CardHeader>
                              <CardContent className="space-y-4">
                                {section.info && (
                                  <>
                                    <div className="flex items-start">
                                      <div className="mr-3 mt-1">📍</div>
                                      <div>{section.info.address}</div>
                                    </div>
                                    <div className="flex items-start">
                                      <div className="mr-3 mt-1">📧</div>
                                      <div>{section.info.email}</div>
                                    </div>
                                    <div className="flex items-start">
                                      <div className="mr-3 mt-1">📱</div>
                                      <div>{section.info.phone}</div>
                                    </div>
                                    <div className="flex items-start">
                                      <div className="mr-3 mt-1">🕒</div>
                                      <div>{section.info.hours}</div>
                                    </div>
                                  </>
                                )}
                              </CardContent>
                            </Card>
                            <Card className="shadow-md">
                              <CardHeader>
                                <CardTitle>Send a Message</CardTitle>
                              </CardHeader>
                              <CardContent>
                                <form className="space-y-4">
                                  <div>
                                    <label className="block text-sm font-medium mb-1">
                                      Name
                                    </label>
                                    <input
                                      type="text"
                                      className="w-full p-2 border rounded-md bg-background"
                                      placeholder="Your name"
                                      disabled
                                    />
                                  </div>
                                  <div>
                                    <label className="block text-sm font-medium mb-1">
                                      Email
                                    </label>
                                    <input
                                      type="email"
                                      className="w-full p-2 border rounded-md bg-background"
                                      placeholder="Your email"
                                      disabled
                                    />
                                  </div>
                                  <div>
                                    <label className="block text-sm font-medium mb-1">
                                      Message
                                    </label>
                                    <textarea
                                      className="w-full p-2 border rounded-md bg-background min-h-[120px]"
                                      placeholder="Your message"
                                      disabled
                                    ></textarea>
                                  </div>
                                  <Button className="w-full">
                                    Send Message
                                  </Button>
                                </form>
                              </CardContent>
                            </Card>
                          </div>
                        </div>
                      </section>
                    );

                  case "cta-banner":
                    return (
                      <section
                        key={idx}
                        className="py-16 px-4 bg-cover bg-center"
                        style={
                          section.background
                            ? getSectionBackgroundStyle(section.background)
                            : content.theme?.primaryColor
                            ? {
                                backgroundColor: content.theme.primaryColor,
                                color: "#fff",
                              }
                            : { backgroundColor: "var(--primary)" }
                        }
                      >
                        <div className="max-w-4xl mx-auto text-center">
                          <h2 className="text-3xl font-bold mb-4 text-white">
                            {section.heading}
                          </h2>
                          {section.content && (
                            <p className="mb-8 text-white/80">
                              {section.content}
                            </p>
                          )}
                          {section.cta && (
                            <Button
                              size="lg"
                              className="rounded-full px-8 bg-white hover:bg-white/90"
                              style={{
                                color:
                                  content.theme?.primaryColor ||
                                  "var(--primary)",
                              }}
                            >
                              {section.cta}
                            </Button>
                          )}
                        </div>
                      </section>
                    );

                  default:
                    return (
                      <section key={idx} className="py-12 px-4">
                        <div className="max-w-4xl mx-auto">
                          <Card className="border-none shadow-sm">
                            <CardHeader>
                              <CardTitle className="text-2xl">
                                {section.heading}
                              </CardTitle>
                            </CardHeader>
                            <CardContent>
                              {section.content && <p>{section.content}</p>}
                            </CardContent>
                          </Card>
                        </div>
                      </section>
                    );
                }
              })}
            </div>
          ) : (
            <div className="p-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center">
                    <Code2 className="mr-2 h-5 w-5" />
                    Generated HTML & CSS
                  </CardTitle>
                  <CardDescription>
                    This is the code for your generated website
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="relative">
                    <Button
                      size="sm"
                      variant="ghost"
                      className="absolute top-2 right-2 h-8 w-8 p-0"
                      title="Copy code"
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                    <pre className="bg-muted p-4 rounded-md overflow-x-auto text-sm">
                      <code>{`<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${content.title}</title>
  <meta name="description" content="${content.description}">
  <!-- Generated styles would go here -->
</head>
<body>
  <!-- Sample code representation -->
  ${content.sections
    .map(
      (section) => `<!-- ${section.type.toUpperCase()} SECTION -->
  <section class="${section.type}-section">
    <div class="container">
      <h2>${section.heading}</h2>
      ${
        section.subheading
          ? `<p class="subheading">${section.subheading}</p>`
          : ""
      }
      ${section.content ? `<div class="content">${section.content}</div>` : ""}
    </div>
  </section>`
    )
    .join("\n\n  ")}
</body>
</html>`}</code>
                    </pre>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-between">
                  <Button variant="outline" size="sm">
                    <Download className="mr-2 h-4 w-4" />
                    Download Code
                  </Button>
                  <Button size="sm">
                    <Check className="mr-2 h-4 w-4" />
                    Use This Code
                  </Button>
                </CardFooter>
              </Card>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
